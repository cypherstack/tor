name: tor_ffi_plugin
description: A multi-platform Flutter plugin for managing a Tor proxy. Based on arti.
version: 0.0.3
homepage: https://github.com/Foundation-Devices/tor

platforms:
  android:
  ios:
  linux:
  macos:
  windows:

environment:
  sdk: '>=3.0.0 <4.0.0'
  flutter: ">=3.3.0"

dependencies:
  flutter:
    sdk: flutter
  ffi: ^2.0.1
  plugin_platform_interface: ^2.0.2
  path_provider: ^2.1.3

dev_dependencies:
  ffigen: ^11.0.0
  flutter_test:
    sdk: flutter
  flutter_lints: ^2.0.0

ffigen:
  output: 'lib/generated_bindings.dart'
  llvm-path:
    - '/usr/lib/llvm-14/lib/libclang.so.1'
  functions:
    include:
      - tor_.*
  structs:
    exclude:
      - .*
  unions:
    exclude:
      - .*
  enums:
    exclude:
      - _.*
  unnamed-enums:
    exclude:
      - _.*
  macros:
    exclude:
      - _.*
  globals:
    exclude:
      - _.*
  headers:
    entry-points:
      - 'rust/target/tor.h'

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:
  # This section identifies this Flutter project as a plugin project.
  # The 'pluginClass' specifies the class (in Java, Kotlin, Swift, Objective-C, etc.)
  # which should be registered in the plugin registry. This is required for
  # using method channels.
  # The Android 'package' specifies package in which the registered class is.
  # This is required for using method channels on Android.
  # The 'ffiPlugin' specifies that native code should be built and bundled.
  # This is required for using `dart:ffi`.
  # All these are used by the tooling to maintain consistency when
  # adding or updating assets for this project.
  #
  # Please refer to README.md for a detailed explanation.
  plugin:
    platforms:
      android:
        ffiPlugin: true
      ios:
        ffiPlugin: true
      linux:
        ffiPlugin: true
      macos:
        ffiPlugin: true
      windows:
        ffiPlugin: true
